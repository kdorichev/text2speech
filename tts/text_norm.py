# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_text_norm.ipynb (unless otherwise specified).

__all__ = ['collapse_whitespace', 'lowercase', 'check_no_numbers', 'remove_specials', 'expand_abbreviations',
           'basic_cleaners', 'russian_cleaners', 'main']

# Cell
import re
import argparse
#import fileinput

# Cell
_whitespace_re = re.compile(r'\s+')

def collapse_whitespace(text):
    return re.sub(_whitespace_re, ' ', text)

# Cell
def lowercase(text):
    return text.lower()

# Cell
def check_no_numbers(text):
    "Return a list of digits, or empty, if not found"
    return re.findall(r"(\d+)", text)

# Cell
def remove_specials(text):
    for regex, replacement in _specials:
        text = re.sub(regex, replacement, text)
    return text

# Cell
_abbreviations = [(re.compile(f'\\b{x[0]}', re.IGNORECASE), x[1]) for x in [
  ('т.е.', 'то есть'),
  ('т.к.', 'так как'),
  ('и т.д.', 'и так далее'),
  ('и т.п.', 'и тому подобное')
]]

# Cell
def expand_abbreviations(text):
    for regex, replacement in _abbreviations:
        text = re.sub(regex, replacement, text)
    return text

# Cell
def basic_cleaners(text):
    '''Basic pipeline that lowercases and collapses whitespace without transliteration.'''
    text = lowercase(text)
    text = collapse_whitespace(text)
    return text

# Cell
def russian_cleaners(text):
    '''Pipeline for English text, including number and abbreviation expansion.'''
    text = lowercase(text)
    text = remove_specials(text)
    text = expand_abbreviations(text)
    text = collapse_whitespace(text)
    numbers = check_no_numbers(text)
    if (numbers != []):
        print("Запишите числительные не цифрами, а словами:")
        print(numbers)
    return text

# Cell
def main():
    parser = argparse.ArgumentParser(description="Text Normalization Utility")
    parser.add_argument("-i", "--input", required=False, help="Input text for normalization")
    parser.add_argument("-o", "--output", required=False, help="Output file name.")
